<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(PkgYamlDotNet)\\lib\\net47\\YamlDotNet.dll" #>
<#@ import namespace="YamlDotNet" #>
<#@ import namespace="YamlDotNet.Serialization" #>
<#@ import namespace="YamlDotNet.Serialization.NamingConventions" #>
<#@ include file="Harp.tt" #><##>
<#@ output extension=".cs" #>
<#
var path = Host.ResolvePath(string.Empty);
var namespaceName = Path.GetFileName(path);

DeviceInfo deviceMetadata;
IEnumerable<KeyValuePair<string, RegisterInfo>> eventMetadata;
IEnumerable<KeyValuePair<string, RegisterInfo>> commandMetadata;
var metadataFileName = Host.ResolvePath("../../../Firmware/VestibularH1/registers.yml");
using (var reader = new StreamReader(metadataFileName))
{
    var deserializer = new DeserializerBuilder()
        .WithNamingConvention(CamelCaseNamingConvention.Instance)
        .Build();

    deviceMetadata = deserializer.Deserialize<DeviceInfo>(reader);
    eventMetadata = deviceMetadata.Registers.Where(register => register.Value.RegisterType == RegisterType.Event);
    commandMetadata = deviceMetadata.Registers.Where(register => register.Value.RegisterType == RegisterType.Command);
}

var deviceName = deviceMetadata.Device;
var deviceClassName = deviceName + "Device";
var eventClassName = deviceName + "Event";
var commandClassName = deviceName + "Command";
#>
<#
foreach (var ns in Host.StandardImports)
{
    Write("using " + ns + ";");
}
#>

using System.ComponentModel;
using System.Reactive.Linq;
using System.Xml.Serialization;

namespace <#= namespaceName #>
{
    /// <summary>
    /// Represents an observable source of messages from the <#= deviceName #> device connected
    /// at the specified serial port.
    /// </summary>
    [Combinator(MethodName = nameof(Generate))]
    [WorkflowElementCategory(ElementCategory.Source)]
    [Description("Generates events and processes commands for the <#= deviceName #> device.")]
    public partial class <#= deviceClassName #>
    {
        readonly Device device = new Device(whoAmI: <#= deviceMetadata.WhoAmI #>);

        /// <summary>
        /// Gets or sets the name of the serial port used to communicate with the
        /// <#= deviceName #> device.
        /// </summary>
        [TypeConverter(typeof(PortNameConverter))]
        [Description("The name of the serial port used to communicate with the <#= deviceName #> device.")]
        public string PortName
        {
            get { return device.PortName; }
            set { device.PortName = value; }
        }

        /// <summary>
        /// Connects to the specified serial port and returns an observable sequence of Harp messages
        /// coming from the device.
        /// </summary>
        /// <returns>The observable sequence of Harp messages produced by the device.</returns>
        public IObservable<HarpMessage> Generate()
        {
            return Generate(Observable.Empty<HarpMessage>());
        }

        /// <summary>
        /// Connects to the specified serial port and sends the observable sequence of Harp messages.
        /// The return value is an observable sequence of Harp messages coming from the device.
        /// </summary>
        /// <param name="source">An observable sequence of Harp messages to send to the device.</param>
        /// <returns>The observable sequence of Harp messages produced by the device.</returns>
        public IObservable<HarpMessage> Generate(IObservable<HarpMessage> source)
        {
            return device.Generate(source);
        }
    }

    /// <summary>
    /// Represents an operator which filters and selects specific event messages
    /// reported by the Harp device.
    /// </summary>
<#
foreach (var register in eventMetadata)
{
#>
    /// <seealso cref="<#= register.Key #>"/>
<#
}
#>
<#
foreach (var register in eventMetadata)
{
#>
    [XmlInclude(typeof(<#= register.Key #>))]
<#
}
#>
    public partial class <#= eventClassName #> : EventBuilder
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= eventClassName #>"/> class.
        /// </summary>
        public <#= eventClassName #>()
        {
            Event = new <#= eventMetadata.First().Key #>();
        }
    }
<#
foreach (var registerMetadata in eventMetadata)
{
    var register = registerMetadata.Value;
    var payloadSuffix = register.PayloadTypeSuffix;
    var payloadSelector = $"input.GetPayload{payloadSuffix}()";
    var interfaceType = Converter.GetInterfaceType(registerMetadata.Key, register);
    var conversion = Converter.GetEventConversion(register, payloadSelector);
    var summaryDescription = string.IsNullOrEmpty(register.Description)
        ? $"from register {registerMetadata.Key}"
        : $"that {char.ToLower(register.Description[0])}{register.Description.Substring(1).TrimEnd('.')}";
#>

    /// <summary>
    /// Represents an operator which filters and selects a sequence of event messages
    /// <#= summaryDescription #>.
    /// </summary>
    [DesignTimeVisible(false)]
    [Description("Filters and selects a sequence of event messages <#= summaryDescription #>.")]
    public partial class <#= registerMetadata.Key #> : Combinator<HarpMessage, <#= interfaceType #>>
    {<#
    if (register.PayloadSpec != null)
    {
#>

        static <#= interfaceType #> Parse(<#= register.PayloadInterfaceType #> payload)
        {
            <#= interfaceType #> result;
<#
        foreach (var member in register.PayloadSpec)
        {
            var memberConversion = Converter.GetPayloadMemberParser(member.Value, "payload");
#>
            result.<#= member.Key #> = <#= memberConversion #>;
<#
        }
#>
            return result;
        }
<#
    }#>

        /// <summary>
        /// Filters and selects an observable sequence of event messages
        /// <#= summaryDescription #>.
        /// </summary>
        /// <param name="source">The sequence of Harp event messages.</param>
        /// <returns>
        /// A sequence of <see cref="<#= interfaceType #>"/> objects representing the
        /// register payload.
        /// </returns>
        public override IObservable<<#= interfaceType #>> Process(IObservable<HarpMessage> source)
        {
            return source.Event(address: <#= register.Address #>).Select(input => <#= conversion #>);
        }
    }
<#
}
#>

    /// <summary>
    /// Represents an operator which creates standard command messages for the
    /// Harp device.
    /// </summary>
<#
foreach (var register in commandMetadata)
{
#>
    /// <seealso cref="<#= register.Key #>"/>
<#
}
#>
<#
foreach (var register in commandMetadata)
{
#>
    [XmlInclude(typeof(<#= register.Key #>))]
<#
}
#>
    public partial class <#= commandClassName #> : CommandBuilder
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= commandClassName #>"/> class.
        /// </summary>
        public <#= commandClassName #>()
        {
            Command = new <#= commandMetadata.First().Key #>();
        }
    }
<#
foreach (var registerMetadata in commandMetadata)
{
    var register = registerMetadata.Value;
    var payloadSuffix = register.PayloadTypeSuffix;
    var interfaceType = Converter.GetInterfaceType(registerMetadata.Key, register);
    var conversion = !string.IsNullOrEmpty(register.MaskType) ? $"({Converter.GetInterfaceType(register.PayloadType)})" : string.Empty;
    var summaryDescription = string.IsNullOrEmpty(register.Description)
        ? $"to write on register {registerMetadata.Key}"
        : $"that {char.ToLower(register.Description[0])}{register.Description.Substring(1).TrimEnd('.')}";
#>

    /// <summary>
    /// Represents an operator that creates a sequence of command messages
    /// <#= summaryDescription #>.
    /// </summary>
    [DesignTimeVisible(false)]
    [Description("Creates a sequence of command messages <#= summaryDescription #>.")]
    public partial class <#= registerMetadata.Key #> : Combinator<<#= interfaceType #>, HarpMessage>
    {
        public override IObservable<HarpMessage> Process(IObservable<<#= interfaceType #>> source)
        {
            return source.Select(input => HarpCommand.Write<#= payloadSuffix #>(address: <#= register.Address #>, <#= conversion #>input));
        }
    }
<#
}
#>
<#
foreach (var registerMetadata in deviceMetadata.Registers)
{
    var register = registerMetadata.Value;
    if (register.PayloadSpec == null) continue;
#>

    /// <summary>
    /// Represents the payload of the <#= registerMetadata.Key #> register.
    /// </summary>
    public struct <#= registerMetadata.Key #>Payload
    {<#
    foreach (var member in register.PayloadSpec)
    {
        var memberType = string.IsNullOrEmpty(member.Value.MaskType) ? Converter.GetInterfaceType(register.PayloadType) : member.Value.MaskType;
#>

        /// <summary>
        /// <#= member.Value.Description #>
        /// </summary>
        public <#= memberType #> <#= member.Key #>;
<#
    }
#>
    }
<#
}
#>
<#
foreach (var bitMask in deviceMetadata.BitMasks)
{
    var mask = bitMask.Value;
#>

    /// <summary>
    /// <#= mask.Description #>
    /// </summary>
    [Flags]
    public enum <#= bitMask.Key #> : <#= mask.InterfaceType #>
    {
<#
    var bitIndex = 0;
    foreach (var bitField in mask.Bits)
    {
#>
        <#= bitField.Key #> = 0x<#= bitField.Value.ToString("X") #><#= ++bitIndex < mask.Bits.Count ? "," : string.Empty #>
<#
    }
#>
    }
<#
}
#>
<#
foreach (var groupMask in deviceMetadata.GroupMasks)
{
    var mask = groupMask.Value;
#>

    /// <summary>
    /// <#= mask.Description #>
    /// </summary>
    public enum <#= groupMask.Key #> : <#= mask.InterfaceType #>
    {
<#
    var memberIndex = 0;
    foreach (var member in mask.Values)
    {
#>
        <#= member.Key #> = <#= member.Value #><#= ++memberIndex < mask.Values.Count ? "," : string.Empty #>
<#
    }
#>
    }
<#
}
#>
}
