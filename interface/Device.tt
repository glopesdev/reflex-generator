<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Interface.tt" #><##>
<#@ output extension=".Interface.cs" #>
<#
var namespaceName = Host.ResolveAssemblyReference("$(MSBuildProjectName)");
var firmwarePath = Host.ResolveAssemblyReference("$(HarpFirmwarePath)");
var metadataPath = !string.IsNullOrEmpty(firmwarePath)
    ? Host.ResolvePath(firmwarePath)
    : Path.GetDirectoryName(Host.TemplateFile);
var templateFileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
var metadataFileName = Path.Combine(metadataPath, templateFileName) + ".yml";

var deviceMetadata = TemplateHelper.ReadDeviceMetadata(metadataFileName);
var publicRegisters = deviceMetadata.Registers.Where(register => register.Value.Visibility == RegisterVisibility.Public).ToList();
var commandRegisters = publicRegisters.Where(register => (register.Value.RegisterType & RegisterType.Command) != 0).ToList();
var deviceName = deviceMetadata.Device;
#>
using Bonsai;
using Bonsai.Harp;
<#
foreach (var ns in Host.StandardImports)
{
    WriteLine("using " + ns + ";");
}
#>
using System.ComponentModel;
using System.Reactive.Linq;
using System.Xml.Serialization;

namespace <#= namespaceName #>
{
    /// <summary>
    /// Generates events and processes commands for the <#= deviceName #> device connected
    /// at the specified serial port.
    /// </summary>
    [Combinator(MethodName = nameof(Generate))]
    [WorkflowElementCategory(ElementCategory.Source)]
    [Description("Generates events and processes commands for the <#= deviceName #> device.")]
    public partial class Device : Bonsai.Harp.Device, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" class.
        /// </summary>
        public Device() : base(whoAmI: <#= deviceMetadata.WhoAmI #>) { }

        string INamedElement.Name => nameof(<#= deviceName #>);
    }
<#
if (publicRegisters.Count > 0)
{
#>

    /// <summary>
    /// Represents an operator which filters and selects specific messages
    /// reported by the <#= deviceName #> device.
    /// </summary>
<#
foreach (var register in publicRegisters)
{
#>
    /// <seealso cref="<#= register.Key #>"/>
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(<#= register.Key #>))]
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(Timestamped<#= register.Key #>))]
<#
}
#>
    [Description("Filters and selects specific messages reported by the <#= deviceName #> device.")]
    public partial class Parse : ParseBuilder, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Parse"/> class.
        /// </summary>
        public Parse()
        {
            Register = new <#= publicRegisters.First().Key #>();
        }

        string INamedElement.Name => $"{nameof(<#= deviceName #>)}.{GetElementDisplayName(Register)}";
    }

    /// <summary>
    /// Represents an operator which formats a sequence of values as specific
    /// <#= deviceName #> register messages.
    /// </summary>
<#
foreach (var register in publicRegisters)
{
#>
    /// <seealso cref="<#= register.Key #>"/>
<#
}
#>
<#
foreach (var register in publicRegisters)
{
#>
    [XmlInclude(typeof(<#= register.Key #>))]
<#
}
#>
    [Description("Formats a sequence of values as specific <#= deviceName #> register messages.")]
    public partial class Format : FormatBuilder, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Format"/> class.
        /// </summary>
        public Format()
        {
            Register = new <#= publicRegisters.First().Key #>();
        }

        string INamedElement.Name => $"{nameof(<#= deviceName #>)}.{GetElementDisplayName(Register)}";
    }
<#
foreach (var registerMetadata in publicRegisters)
{
    var register = registerMetadata.Value;
    var interfaceType = TemplateHelper.GetInterfaceType(registerMetadata.Key, register);
    var parsePayloadSuffix = TemplateHelper.GetPayloadTypeSuffix(register.PayloadType, register.PayloadLength);
    var parsePayloadSelector = $"message.GetPayload{parsePayloadSuffix}()";
    var parseConversion = TemplateHelper.GetEventConversion(register, parsePayloadSelector);

    var payloadValueSelector = "payload.Value";
    var timestampedPayloadSelector = $"message.GetTimestampedPayload{parsePayloadSuffix}()";
    var timestampedParseConversion = TemplateHelper.GetEventConversion(register, payloadValueSelector);

    var formatPayloadSuffix = TemplateHelper.GetPayloadTypeSuffix(register.PayloadType);
    var formatConversion = TemplateHelper.GetCommandConversion(register, "value");
    var summaryDescription = string.IsNullOrEmpty(register.Description)
        ? $"manipulates messages from register {registerMetadata.Key}"
        : $"{char.ToLower(register.Description[0])}{register.Description.Substring(1).TrimEnd('.')}";
#>

    /// <summary>
    /// Represents an operator that <#= summaryDescription #>.
    /// </summary>
    [Description("<#= register.Description #>")]
    public partial class <#= registerMetadata.Key #> : HarpCombinator
    {
        /// <summary>
        /// Represents the address of the <see cref="<#= registerMetadata.Key #>"/> register. This field is constant.
        /// </summary>
        public const int Address = <#= register.Address #>;
<#
    if ((register.RegisterType & RegisterType.Event) != 0)
    {
#>

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= registerMetadata.Key #>"/> class.
        /// </summary>
        public <#= registerMetadata.Key #>()
        {
            MessageType = MessageType.Event;
        }
<#
    }#>
<#
    if (register.PayloadSpec != null && string.IsNullOrEmpty(register.Converter))
    {
#>

        static <#= interfaceType #> ParsePayload(<#= register.PayloadInterfaceType #> payload)
        {
            <#= interfaceType #> result;
<#
        foreach (var member in register.PayloadSpec)
        {
            var memberConversion = TemplateHelper.GetPayloadMemberParser(
                member.Value,
                "payload",
                register.PayloadType);
#>
            result.<#= member.Key #> = <#= memberConversion #>;
<#
        }
#>
            return result;
        }
<#
    }

    if (register.PayloadSpec != null && string.IsNullOrEmpty(register.Converter))
    {
#>

        static <#= register.PayloadInterfaceType #> FormatPayload(<#= interfaceType #> value)
        {
            <#= register.PayloadInterfaceType #> result;
<#
        if (register.PayloadLength > 0)
        {
#>
            result = new <#= TemplateHelper.GetInterfaceType(register.PayloadType) #>[<#= register.PayloadLength #>];
<#
        }
#>
<#
        var assigned = new bool[Math.Max(1, register.PayloadLength)];
        foreach (var member in register.PayloadSpec)
        {
            var payloadIndex = member.Value.Offset.GetValueOrDefault(0);
            var memberIndexer = member.Value.Offset.HasValue ? $"[{member.Value.Offset}]" : string.Empty;
            var memberConversion = TemplateHelper.GetPayloadMemberFormatter(
                member.Value,
                $"value.{member.Key}",
                register.PayloadType,
                assigned[payloadIndex]);
            assigned[payloadIndex] = true;
#>
            result<#= memberIndexer #><#= memberConversion #>;
<#
        }
#>
            return result;
        }
<#
    }#>
        
        /// <summary>
        /// Returns the payload data for <see cref="<#= registerMetadata.Key #>"/> register messages.
        /// </summary>
        /// <param name="message">A <see cref="HarpMessage"/> object representing the register message.</param>
        /// <returns>A value representing the message payload.</returns>
        public static <#= interfaceType #> Parse(HarpMessage message)
        {
            return <#= parseConversion #>;
        }

        /// <summary>
        /// Returns the timestamped payload data for <see cref="<#= registerMetadata.Key #>"/> register messages.
        /// </summary>
        /// <param name="message">A <see cref="HarpMessage"/> object representing the register message.</param>
        /// <returns>A value representing the timestamped message payload.</returns>
        public static Timestamped<<#= interfaceType #>> ParseTimestamped(HarpMessage message)
        {
<#
    if (timestampedParseConversion != payloadValueSelector)
    {
#>
            var payload = <#= timestampedPayloadSelector #>;
            return Timestamped.Create(<#= timestampedParseConversion #>, payload.Seconds);
<#
    }
    else
    {
#>
            return <#= timestampedPayloadSelector #>;
<#
    }
#>
        }

        /// <summary>
        /// Creates a command message for the <see cref="<#= registerMetadata.Key #>"/> register.
        /// </summary>
        /// <param name="messageType">The type of the command message.</param>
        /// <param name="value">A value representing the command message payload.</param>
        /// <returns>A <see cref="HarpMessage"/> object representing the command message.</returns>
        public static HarpMessage Format(MessageType messageType, <#= interfaceType #> value)
        {
            return HarpMessage.From<#= formatPayloadSuffix #>(Address, messageType, <#= formatConversion #>);
        }

        /// <summary>
        /// Creates a timestamped command message for the <see cref="<#= registerMetadata.Key #>"/>
        /// register.
        /// </summary>
        /// <param name="timestamp">The timestamp of the message payload, in seconds.</param>
        /// <param name="messageType">The type of the command message.</param>
        /// <param name="value">A value representing the command message payload.</param>
        /// <returns>A <see cref="HarpMessage"/> object representing the command message.</returns>
        public static HarpMessage Format(double timestamp, MessageType messageType, <#= interfaceType #> value)
        {
            return HarpMessage.From<#= formatPayloadSuffix #>(Address, timestamp, messageType, <#= formatConversion #>);
        }

        /// <summary>
        /// Filters and selects an observable sequence of messages from the
        /// <see cref="<#= registerMetadata.Key #>"/> register.
        /// </summary>
        /// <param name="source">The sequence of Harp device messages.</param>
        /// <returns>
        /// A sequence of <see cref="<#= interfaceType #>"/> objects representing the
        /// register payload.
        /// </returns>
        public IObservable<<#= interfaceType #>> Process(IObservable<HarpMessage> source)
        {
            return source.Where(Address, MessageType).Select(Parse);
        }

        /// <summary>
        /// Formats an observable sequence of values into command messages
        /// for the <see cref="<#= registerMetadata.Key #>"/> register.
        /// </summary>
        /// <param name="source">
        /// A sequence of <see cref="<#= interfaceType #>"/> objects representing the
        /// register payload.
        /// </param>
        /// <returns>
        /// A sequence of <see cref="HarpMessage"/> objects representing each
        /// command message.
        /// </returns>
        public IObservable<HarpMessage> Process(IObservable<<#= interfaceType #>> source)
        {
            return source.Select(value => Format(MessageType, value));
        }

        /// <summary>
        /// Formats an observable sequence of values into timestamped command messages
        /// for the <see cref="<#= registerMetadata.Key #>"/> register.
        /// </summary>
        /// <param name="source">
        /// A sequence of timestamped <see cref="<#= interfaceType #>"/> objects representing
        /// the register payload.
        /// </param>
        /// <returns>
        /// A sequence of <see cref="HarpMessage"/> objects representing each
        /// timestamped command message.
        /// </returns>
        public IObservable<HarpMessage> Process(IObservable<Timestamped<<#= interfaceType #>>> source)
        {
            return source.Select(payload => Format(payload.Seconds, MessageType, payload.Value));
        }
    }

    /// <summary>
    /// Represents an operator that filters and selects a sequence of timestamped messages
    /// from the <#= registerMetadata.Key #> register.
    /// </summary>
    [Description("Filters and selects timestamped messages from the <#= registerMetadata.Key #> register.")]
    public partial class Timestamped<#= registerMetadata.Key #> : HarpCombinator
    {
        /// <summary>
        /// Filters and selects an observable sequence of timestamped messages from
        /// the <see cref="<#= registerMetadata.Key #>"/> register.
        /// </summary>
        /// <param name="source">The sequence of Harp device messages.</param>
        /// <returns>
        /// A sequence of timestamped <see cref="<#= interfaceType #>"/> objects
        /// representing the register payload.
        /// </returns>
        public IObservable<Timestamped<<#= interfaceType #>>> Process(IObservable<HarpMessage> source)
        {
            return source.Where(<#= registerMetadata.Key #>.Address, MessageType).Select(<#= registerMetadata.Key #>.ParseTimestamped);
        }
    }
<#
}
#>
<#
} // publicRegisters.Count > 0
#>
<#
if (commandRegisters.Count > 0)
{
#>

    /// <summary>
    /// Represents an operator which creates standard command messages for the
    /// <#= deviceName #> device.
    /// </summary>
<#
foreach (var register in commandRegisters)
{
#>
    /// <seealso cref="<#= register.Key #>Command"/>
<#
}
#>
<#
foreach (var register in commandRegisters)
{
#>
    [XmlInclude(typeof(<#= register.Key #>Command))]
<#
}
#>
    [Description("Creates standard command messages for the <#= deviceName #> device.")]
    public partial class CreateMessage : CreateMessageBuilder, INamedElement
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMessage"/> class.
        /// </summary>
        public CreateMessage()
        {
            Command = new <#= commandRegisters.First().Key #>Command();
        }

        string INamedElement.Name => $"{nameof(<#= deviceName #>)}.{GetElementDisplayName(Command)}";
    }
<#
foreach (var registerMetadata in commandRegisters)
{
    var register = registerMetadata.Value;
    var interfaceType = TemplateHelper.GetInterfaceType(registerMetadata.Key, register);
    var defaultValue = TemplateHelper.GetDefaultValueAssignment(register.DefaultValue, register.MinValue);
    var summaryDescription = string.IsNullOrEmpty(register.Description)
        ? $"for register {registerMetadata.Key}"
        : $"that {char.ToLower(register.Description[0])}{register.Description.Substring(1).TrimEnd('.')}";
#>

    /// <summary>
    /// Represents an operator that creates a sequence of command messages
    /// <#= summaryDescription #>.
    /// </summary>
    [WorkflowElementCategory(ElementCategory.Transform)]
    [Description("Creates a sequence of command messages <#= summaryDescription #>.")]
    public partial class <#= registerMetadata.Key #>Command : HarpCombinator
    {<#
    if (register.PayloadSpec != null)
    {
        foreach (var member in register.PayloadSpec)
        {
            var memberType = TemplateHelper.GetInterfaceType(member.Value, register.PayloadType);
            defaultValue = TemplateHelper.GetDefaultValueAssignment(member.Value.DefaultValue, member.Value.MinValue);
            var memberDescription = string.IsNullOrEmpty(member.Value.Description)
                ? $"to write on payload member {member.Key}"
                : $"that {char.ToLower(member.Value.Description[0])}{member.Value.Description.Substring(1).TrimEnd('.')}";
#>

        /// <summary>
        /// Gets or sets a value <#= memberDescription #>.
        /// </summary>
<#
            if (member.Value.MinValue.HasValue || member.Value.MaxValue.HasValue)
            {
#>
        <#= TemplateHelper.GetRangeAttributeDeclaration(member.Value.MinValue, member.Value.MaxValue) #>
        [Editor(DesignTypes.NumericUpDownEditor, DesignTypes.UITypeEditor)]
<#
            }
#>
        [Description("<#= member.Value.Description #>")]
        public <#= memberType #> <#= member.Key #> { get; set; }<#= defaultValue #>
<#
        }
    }
    else
    {
#>

        /// <summary>
        /// Gets or sets the value <#= summaryDescription #>.
        /// </summary>
<#
        if (register.MinValue.HasValue || register.MaxValue.HasValue)
        {
#>
        <#= TemplateHelper.GetRangeAttributeDeclaration(register.MinValue, register.MaxValue) #>
        [Editor(DesignTypes.NumericUpDownEditor, DesignTypes.UITypeEditor)]
<#
        }
#>
        [Description("The value <#= summaryDescription #>.")]
        public <#= interfaceType #> Value { get; set; }<#= defaultValue #>
<#
    }
#>

        /// <summary>
        /// Creates an observable sequence of command messages
        /// <#= summaryDescription #>.
        /// </summary>
        /// <param name="source">
        /// A sequence of <see cref="<#= interfaceType #>"/> objects representing the
        /// register payload.
        /// </param>
        /// <returns>
        /// A sequence of <see cref="HarpMessage"/> objects representing each
        /// command message.
        /// </returns>
        public IObservable<HarpMessage> Process<TSource>(IObservable<TSource> source)
        {
<#
    if (register.PayloadSpec != null)
    {
#>
            return source.Select(_ =>
            {
                <#= interfaceType #> value;
<#
        foreach (var member in register.PayloadSpec)
        {
#>
                value.<#= member.Key #> = <#= member.Key #>;
<#
        }
#>
                return <#= registerMetadata.Key #>.Format(MessageType, value);
            });
<#
    }
    else
    {
#>
            return source.Select(_ => <#= registerMetadata.Key #>.Format(MessageType, Value));
<#
    }
#>
        }
    }
<#
}
#>
<#
} // commandRegisters.Count > 0
#>
<#
foreach (var registerMetadata in deviceMetadata.Registers)
{
    var register = registerMetadata.Value;
    if (register.PayloadSpec == null) continue;
    var interfaceType = TemplateHelper.GetInterfaceType(registerMetadata.Key, register);
#>

    /// <summary>
    /// Represents the payload of the <#= registerMetadata.Key #> register.
    /// </summary>
    public struct <#= interfaceType #>
    {<#
    foreach (var member in register.PayloadSpec)
    {
        var memberType = TemplateHelper.GetInterfaceType(member.Value, register.PayloadType);
#>

        /// <summary>
        /// <#= member.Value.Description #>
        /// </summary>
        public <#= memberType #> <#= member.Key #>;
<#
    }
#>
    }
<#
}
#>
<#
foreach (var bitMask in deviceMetadata.BitMasks)
{
    var mask = bitMask.Value;
#>

    /// <summary>
    /// <#= mask.Description #>
    /// </summary>
    [Flags]
    public enum <#= bitMask.Key #> : <#= mask.InterfaceType #>
    {
<#
    var bitIndex = 0;
    foreach (var bitField in mask.Bits)
    {
        var fieldInfo = bitField.Value;
#>
<#
        if (!string.IsNullOrEmpty(fieldInfo.Description))
        {
            if (bitIndex > 0) WriteLine("");
#>
        /// <summary>
        /// <#= fieldInfo.Description #>
        /// </summary>
<#
        }
#>
        <#= bitField.Key #> = 0x<#= fieldInfo.Value.ToString("X") #><#= ++bitIndex < mask.Bits.Count ? "," : string.Empty #>
<#
    }
#>
    }
<#
}
#>
<#
foreach (var groupMask in deviceMetadata.GroupMasks)
{
    var mask = groupMask.Value;
#>

    /// <summary>
    /// <#= mask.Description #>
    /// </summary>
    public enum <#= groupMask.Key #> : <#= mask.InterfaceType #>
    {
<#
    var memberIndex = 0;
    foreach (var member in mask.Values)
    {
        var memberInfo = member.Value;
#>
<#
        if (!string.IsNullOrEmpty(memberInfo.Description))
        {
            if (memberIndex > 0) WriteLine("");
#>
        /// <summary>
        /// <#= memberInfo.Description #>
        /// </summary>
<#
        }
#>
        <#= member.Key #> = <#= memberInfo.Value #><#= ++memberIndex < mask.Values.Count ? "," : string.Empty #>
<#
    }
#>
    }
<#
}
#>
}
