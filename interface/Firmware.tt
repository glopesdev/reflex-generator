<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="RegisterMetadataPath" type="string" #>
<#@ parameter name="IOMetadataPath" type="string" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="IO.tt" #><##>
<#@ output extension=".h" #>
#ifndef _APP_IOS_AND_REGS_H_
#define _APP_IOS_AND_REGS_H_
#include "cpu.h"
<#
var deviceMetadata = TemplateHelper.ReadDeviceMetadata(RegisterMetadataPath);
var portPinMetadata = TemplateHelper.ReadPortPinMetadata(IOMetadataPath);
var inputPins = TemplateHelper.GetPortPinsOfType<InputPinInfo>(portPinMetadata).ToList();
var outputPins = TemplateHelper.GetPortPinsOfType<OutputPinInfo>(portPinMetadata).ToList();
var deviceName = deviceMetadata.Device;

int minRegisterAddress = byte.MaxValue;
int maxRegisterAddress = 0;
int totalRegisterSize = 0;
foreach (var register in deviceMetadata.Registers.Values)
{
    minRegisterAddress = Math.Min(minRegisterAddress, register.Address);
    maxRegisterAddress = Math.Max(maxRegisterAddress, register.Address);
    totalRegisterSize += Math.Max(1, register.Length) * TemplateHelper.GetPayloadTypeSize(register.Type);
}
#>

void init_ios(void);
<#
if (inputPins.Count > 0)
{
#>
/************************************************************************/
/* Definition of input pins                                             */
/************************************************************************/
<#
    foreach (var pin in inputPins)
    {
#>
// <#= FirmwareNamingConvention.Instance.Apply(pin.Key) #>                  Description: <#= pin.Value.Description #>
<#
    }
#>

<#
    foreach (var pin in inputPins)
    {
        var pinInfo = pin.Value;
        var pinName = FirmwareNamingConvention.Instance.Apply(pin.Key);
#>
#define read_<#= pinName #> read_io(<#= pinInfo.Port #>, <#= pinInfo.PinNumber #>)            // <#= pinName #>
<#
    }
#>

<#
}
#>
<#
if (outputPins.Count > 0)
{
#>
/************************************************************************/
/* Definition of output pins                                            */
/************************************************************************/
<#
    foreach (var pin in outputPins)
    {
#>
// <#= FirmwareNamingConvention.Instance.Apply(pin.Key) #>                  Description: <#= pin.Value.Description #>
<#
    }
#>
<#
    foreach (var pin in outputPins)
    {
        var pinInfo = pin.Value;
        var pinName = FirmwareNamingConvention.Instance.Apply(pin.Key);
#>

/* <#= pinName #> */
#define set_<#= pinName #> set_io(<#= pinInfo.Port #>, <#= pinInfo.PinNumber #>)
#define clr_<#= pinName #> clear_io(<#= pinInfo.Port #>, <#= pinInfo.PinNumber #>)
#define tgl_<#= pinName #> toggle_io(<#= pinInfo.Port #>, <#= pinInfo.PinNumber #>)
#define read_<#= pinName #> read_io(<#= pinInfo.Port #>, <#= pinInfo.PinNumber #>)
<#
    }
#>

<#
}
#>
/************************************************************************/
/* Registers' structure                                                 */
/************************************************************************/
typedef struct
{
<#
foreach (var registerMetadata in deviceMetadata.Registers)
{
    var register = registerMetadata.Value;
    var registerName = FirmwareNamingConvention.Instance.Apply(registerMetadata.Key);
    var arrayType = register.Length > 0 ? $"[{register.Length}]" : string.Empty;
    var firmwareType = TemplateHelper.GetFirmwareType(register.Type);
#>
    <#= firmwareType #> REG_<#= registerName #><#= arrayType #>;
<#
}
#>
} AppRegs;

/************************************************************************/
/* Registers' address                                                   */
/************************************************************************/
/* Registers */
<#
foreach (var registerMetadata in deviceMetadata.Registers)
{
    var registerName = FirmwareNamingConvention.Instance.Apply(registerMetadata.Key);
    var register = registerMetadata.Value;
#>
#define ADD_REG_<#= registerName #>      <#= register.Address #> // <#= register.Type #>    <#= register.Description #>
<#
}
#>

/************************************************************************/
/* <#= deviceName #> registers' memory limits                           */
/*                                                                      */
/* DON'T change the APP_REGS_ADD_MIN value !!!                          */
/* DON'T change these names !!!                                         */
/************************************************************************/
/* Memory limits */
#define APP_REGS_ADD_MIN                    0x<#= minRegisterAddress.ToString("X") #>
#define APP_REGS_ADD_MAX                    0x<#= maxRegisterAddress.ToString("X") #>
#define APP_NBYTES_OF_REG_BANK              <#= totalRegisterSize #>

/************************************************************************/
/* Registers' bits                                                      */
/************************************************************************/
<#
foreach (var bitMask in deviceMetadata.BitMasks)
{
    var mask = bitMask.Value;
    foreach (var bitField in mask.Bits)
    {
        var fieldInfo = bitField.Value;
        var fieldName = FirmwareNamingConvention.Instance.Apply(bitField.Key);
        var bitShift = (int)Math.Log(fieldInfo.Value, 2);
#>
#define B_<#= fieldName #>    (1<<<#= bitShift #>)       // <#= fieldInfo.Description ?? string.Empty #>
<#
    }
}
#>

#endif /* _APP_REGS_H_ */