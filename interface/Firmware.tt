<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Interface.tt" #><##>
<#@ include file="IO.tt" #><##>
<#@ output extension=".h" #>
#ifndef _APP_IOS_AND_REGS_H_
#define _APP_IOS_AND_REGS_H_
#include "cpu.h"
<#
var namespaceName = Host.ResolveAssemblyReference("$(MSBuildProjectName)");
var firmwarePath = Host.ResolveAssemblyReference("$(HarpFirmwarePath)");
var metadataPath = !string.IsNullOrEmpty(firmwarePath)
    ? Host.ResolvePath(firmwarePath)
    : Path.GetDirectoryName(Host.TemplateFile);
var templateFileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
var metadataFileName = Path.Combine(metadataPath, "device.yml");
var ioFileName = Path.Combine(metadataPath, "ios.yml");

var deviceMetadata = TemplateHelper.ReadDeviceMetadata(metadataFileName);
var portPinMetadata = TemplateHelper.ReadPortPinMetadata(ioFileName);
var deviceName = deviceMetadata.Device;
#>

/************************************************************************/
/* Registers' structure                                                 */
/************************************************************************/
typedef struct
{
<#
foreach (var registerMetadata in deviceMetadata.Registers)
{
    var register = registerMetadata.Value;
    var registerName = UnderscoredNamingConvention.Instance.Apply(registerMetadata.Key).ToUpper();
    var arrayType = register.PayloadLength > 0 ? $"[{register.PayloadLength}]" : string.Empty;
    var firmwareType = TemplateHelper.GetFirmwareType(register.PayloadType);
#>
    <#= firmwareType #> REG_<#= registerName #><#= arrayType #>;
<#
}
#>
} AppRegs;

/************************************************************************/
/* Registers' address                                                   */
/************************************************************************/
/* Registers */
<#
foreach (var registerMetadata in deviceMetadata.Registers)
{
    var registerName = UnderscoredNamingConvention.Instance.Apply(registerMetadata.Key).ToUpper();
    var register = registerMetadata.Value;
#>
#define ADD_REG_<#= registerName #>      <#= register.Address #> // <#= register.PayloadType #>    <#= register.Description #>
<#
}
#>

/************************************************************************/
/* Registers' bits                                                      */
/************************************************************************/
<#
foreach (var bitMask in deviceMetadata.BitMasks)
{
    var mask = bitMask.Value;
    foreach (var bitField in mask.Bits)
    {
        var fieldInfo = bitField.Value;
        var fieldName = UnderscoredNamingConvention.Instance.Apply(bitField.Key).ToUpper();
        var bitShift = (int)Math.Log(fieldInfo.Value, 2);
#>
#define B_<#= fieldName #>    (1<<<#= bitShift #>)       // <#= fieldInfo.Description ?? string.Empty #>
<#
    }
}
#>

#endif /* _APP_REGS_H_ */