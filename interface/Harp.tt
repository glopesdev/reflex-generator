<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(PkgBonsai_Harp)\\lib\\net462\\Bonsai.Harp.dll" #>
<#@ import namespace="Bonsai.Harp" #>
<#+
public class DeviceInfo
{
    public string Device;
    public int WhoAmI;
    public HarpVersion FirmwareVersion;
    public HarpVersion HardwareTargets;
    public Dictionary<string, RegisterInfo> Registers = new Dictionary<string, RegisterInfo>();
    public Dictionary<string, BitMaskInfo> BitMasks = new Dictionary<string, BitMaskInfo>();
    public Dictionary<string, GroupMaskInfo> GroupMasks = new Dictionary<string, GroupMaskInfo>();
}

public enum RegisterType
{
    Command,
    Event,
    Both
}

public class RegisterInfo
{
    public int Address;
    public string Description = "";
    public PayloadType PayloadType;
    public RegisterType RegisterType;
    public Dictionary<string, PayloadMemberInfo> PayloadSpec;
    public string MaskType;

    public string PayloadTypeSuffix => Converter.GetPayloadTypeSuffix(PayloadType);
    public string PayloadInterfaceType => Converter.GetInterfaceType(PayloadType);
}

public class PayloadMemberInfo
{
    public int? Mask;
    public int? Offset;
    public string MaskType;
    public string Description = "";
}

public class BitMaskInfo
{
    public PayloadType PayloadType;
    public string Description = "";
    public Dictionary<string, int> Bits = new Dictionary<string, int>();

    public string InterfaceType => Converter.GetInterfaceType(PayloadType);
}

public class GroupMaskInfo
{
    public PayloadType PayloadType;
    public string Description = "";
    public Dictionary<string, int> Values = new Dictionary<string, int>();

    public string InterfaceType => Converter.GetInterfaceType(PayloadType);
}

public static class Converter
{
    public static string GetInterfaceType(string name, RegisterInfo register)
    {
        if (register.PayloadSpec != null) return $"{name}Payload";
        else if (!string.IsNullOrEmpty(register.MaskType)) return register.MaskType;
        else return Converter.GetInterfaceType(register.PayloadType);
    }

    public static string GetInterfaceType(PayloadType payloadType)
    {
        switch (payloadType)
        {
            case PayloadType.U8: return "byte";
            case PayloadType.S8: return "sbyte";
            case PayloadType.U16: return "ushort";
            case PayloadType.S16: return "short";
            case PayloadType.U32: return "uint";
            case PayloadType.S32: return "int";
            case PayloadType.U64: return "ulong";
            case PayloadType.S64: return "long";
            case PayloadType.Float: return "float";
            default: throw new ArgumentOutOfRangeException(nameof(payloadType));
        }
    }

    public static string GetPayloadTypeSuffix(PayloadType payloadType)
    {
        switch (payloadType)
        {
            case PayloadType.U8: return "Byte";
            case PayloadType.S8: return "SByte";
            case PayloadType.U16: return "UInt16";
            case PayloadType.S16: return "Int16";
            case PayloadType.U32: return "UInt32";
            case PayloadType.S32: return "Int32";
            case PayloadType.U64: return "UInt64";
            case PayloadType.S64: return "Int64";
            case PayloadType.Float: return "Single";
            default: throw new ArgumentOutOfRangeException(nameof(payloadType));
        }
    }

    public static string GetEventConversion(RegisterInfo register, string expression)
    {
        var maskType = register.MaskType;
        if (string.IsNullOrEmpty(maskType)) return expression;
        switch (maskType)
        {
            case "bool": return $"{expression} != 0";
            default: return $"({maskType}){expression}";
        }
    }
}
#>