{
    "$schema": "https://json-schema.org/draft-07/schema",
    "$id": "https://harp-tech.org/2023-01/device",
    "type": "object",
    "properties": {
        "device": {
            "description": "Specifies the name of the device.",
            "type": "string"
        },
        "whoAmI": {
            "description": "Specifies the unique identifier for this device type.",
            "type": "integer"
        },
        "firmwareVersion": {
            "description": "Specifies the semantic version of the device firmware.",
            "type": "string"
        },
        "hardwareVersion": {
            "description": "Specifies the semantic version of the device hardware.",
            "type": "string"
        },
        "architecture": {
            "description": "Architecture of the microcontroller.",
            "type": "string"
        },
        "registers": {
            "description": "Specifies the collection of registers implementing the device function.",
            "type": "array",
            "items": { "$ref": "#/definitions/register" }
        },
        "masks": {
            "description": "Specifies the collection of masks available to be used with the different registers.",
            "type": "array",
            "items": { "$ref": "#/definitions/bitMask" }
        },
        "ios": {
            "description": "Specifies the IO pin configuration used to automatically generate the firmware.",
            "type": "array",
            "items": { "$ref": "#/definitions/pin" }
        }
    },
    "required": ["device", "whoAmI", "firmwareVersion", "hardwareVersion", "registers"],
    "definitions": {
        "payloadType": {
            "description": "Specifies the type of the register payload.",
            "type": "string",
            "enum": ["U8", "S8", "U16", "S16", "U32", "S32", "U64", "S64", "Float"]
        },
        "bitMask": {
            "description": "Specifies a bit mask used for reading or writing specific registers.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Specifies the unique name of the bit mask.",
                    "type": "string"
                },
                "description": {
                    "description": "Specifies a summary description of the bit mask function.",
                    "type": "string"
                },
                "payloadType": { "$ref": "#/definitions/payloadType" },
                "bits": {
                    "type": "object",
                    "additionalProperties": { "type": "integer" }
                }
            },
            "required": ["name", "payloadType"]
        },
        "register": {
            "type": "object",
            "properties": {
                "name": {
                    "description":"Specifies the unique name of the register.",
                    "type": "string"
                },
                "description": {
                    "description": "Specifies a summary description of the register function.",
                    "type": "string"
                },
                "address": {
                    "description": "Specifies the unique 8-bit address of the register.",
                    "type": "integer",
                    "maximum": 255
                },
                "registerType": {
                    "description": "Specifies the expected use of the register.",
                    "type": "string",
                    "enum": ["Command", "Event"]
                },
                "payloadType": { "$ref": "#/definitions/payloadType" },
                "arrayType": {
                    "description": "Specifies the optional array format for the register payload.",
                    "oneOf": [
                        {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "type": "integer"
                        }
                    ]
                },
                "maskType": {
                    "$ref": "#/definitions/bitMask/properties/name"
                },
                "converter": {
                    "description": "Flags the existence of an optional converter method used to parse or format the mask value in the high-level interface.",
                    "type": "boolean"
                },
                "alias": {
                    "description": "Specifies an optional alias used to generate the register high-level interface.",
                    "type": "string"
                },
                "visibility": {
                    "description": "Specifies whether the register function is exposed in the high-level interface.",
                    "type": "string",
                    "enum": ["public", "private"]
                },
                "group": {
                    "description": "Specifies an optional group name used to expose the register function in the high-level interface.",
                    "type": "string"
                }
            },
            "required": ["name", "address", "registerType", "payloadType"]
        },
        "pin": {
            "type": "object",
            "properties": {
                "name": {
                    "description":"Specifies the unique name of the IO pin.",
                    "type": "string"
                },
                "description": {
                    "description": "Specifies a summary description of the IO function.",
                    "type": "string"
                },
                "port": {
                    "description": "Specifies the microcontroller port.",
                    "type": "string"
                },
                "pinNumber": {
                    "description": "Specifies the unique pin number in the defined port.",
                    "type": "integer"
                },
                "direction": {
                    "description": "Specifies whether the pin will be used as input or output.",
                    "type": "string",
                    "enum": ["input", "output"]
                },
                "useInput": {
                    "description": "Specifies whether the output pin can also read its state from the input `mode`",
                    "type": "boolean"
                },
                "pull": {
                    "description": " JUST FOR INPUTS ... Specifies the state of the pin input pull, or latch, circuit.",
                    "type": "string",
                    "enum": ["up", "down", "tristate", "busholder"]
                },
                "sense":{
                    "description": "Specifies event a digital input pin is sensitive to.",
                    "type": "string",
                    "enum": ["both", "rising", "falling", "low", "none"]
                },
                "interruptPriority": {
                    "description": "Specifies the priority of the interrupt event for this pin.",
                    "type": "string",
                    "enum": ["low", "med", "high", "off"]
                },
                "interruptNumber":{
                    "description": "Specifies the interrupt number associated with the specific pin.",
                    "type": "string",
                    "enum": ["INT0", "INT1"]
                },
                "out":{
                    "description": "ONLY OUTPUTS. Specifies output mode of the pin.",
                    "type": "string",
                    "enum": ["digital", "wire_or", "wire_and", "wired_or_pull", "wired_and_pull"]
                },
                "outDefault":{
                    "description": "Specifies the initial state of the output line at boot time.",
                    "enum": [0, 1]
                },
                "outInvert":{
                    "description": "Specifies whether the output should be inverted.",
                    "type": "boolean"
                }
            },
            "required": ["name", "port", "pin", "direction"]
        }
    }
}