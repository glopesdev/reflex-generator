{
    "$schema": "https://json-schema.org/draft-07/schema",
    "$id": "https://harp-tech.org/2023-01/device",
    "type": "object",
    "properties": {
        "device": {
            "description": "Specifies the name of the device.",
            "type": "string"
        },
        "whoAmI": {
            "description": "Specifies the unique identifier for this device type.",
            "type": "integer"
        },
        "firmwareVersion": {
            "description": "Specifies the semantic version of the device firmware.",
            "type": "string"
        },
        "hardwareTargets": {
            "description": "Specifies the semantic version of the device hardware.",
            "type": "string"
        },
        "architecture": {
            "description": "Architecture of the microcontroller.",
            "type": "string"
        },
        "registers": {
            "type": "object",
            "description": "Specifies the collection of registers implementing the device function.",
            "additionalProperties": { "$ref": "#/definitions/register" }
        },
        "bitMasks": {
            "type": "object",
            "description": "Specifies the collection of masks available to be used with the different registers.",
            "additionalProperties": { "$ref": "#/definitions/bitMask" }
        },
        "groupMasks": {
            "type": "object",
            "description": "Specifies the collection of group masks available to be used with the different registers.",
            "additionalProperties": { "$ref": "#/definitions/groupMask" }
        },
        "ios": {
            "type": "object",
            "description": "Specifies the IO pin configuration used to automatically generate the firmware.",
            "additionalProperties": { "$ref": "#/definitions/pinMapping" }
        }
    },
    "required": ["device", "whoAmI", "firmwareVersion", "hardwareTargets", "registers"],
    "definitions": {
        "payloadType": {
            "description": "Specifies the type of the register payload.",
            "type": "string",
            "enum": ["U8", "S8", "U16", "S16", "U32", "S32", "U64", "S64", "Float"]
        },
        "registerType": {
            "type": "string",
            "enum": ["Command", "Event"]
        },
        "bitMask": {
            "description": "Specifies a bit mask used for reading or writing specific registers.",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Specifies a summary description of the bit mask function.",
                    "type": "string"
                },
                "bits": {
                    "type": "object",
                    "additionalProperties": { "type": "integer" }
                }
            },
            "required": ["bits"]
        },
        "groupMask": {
            "description": "Specifies a group mask used for reading or writing specific registers.",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Specifies a summary description of the group mask function.",
                    "type": "string"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": { "type": "integer" }
                }
            },
            "required": ["values"]
        },
        "maskType": {
            "description": "Specifies the name of the bit mask or group mask used to represent the payload value.",
            "type": "string"
        },
        "converter": {
            "description": "Specifies a custom converter method used to parse or format the payload value in the high-level interface.",
            "type": "string"
        },
        "minValue": {
            "description": "Specifies the minimum allowable value for the payload or payload member.",
            "type": "number"
        },
        "maxValue": {
            "description": "Specifies the maximum allowable value for the payload or payload member.",
            "type": "number"
        },
        "defaultValue": {
            "description": "Specifies the default value for the payload or payload member.",
            "type": "number"
        },
        "payloadMember": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Specifies a summary description of the payload member.",
                    "type": "string"
                },
                "mask": {
                    "description": "Specifies the mask used to read and write this payload member.",
                    "type": "integer"
                },
                "offset": {
                    "description": "Specifies the payload array offset where this payload member is stored.",
                    "type": "integer"
                },
                "maskType": { "$ref": "#/definitions/maskType" },
                "converter": { "$ref": "#/definitions/converter" },
                "minValue": { "$ref": "#/definitions/minValue" },
                "maxValue": { "$ref": "#/definitions/maxValue" },
                "defaultValue": { "$ref": "#/definitions/defaultValue" }
            }
        },
        "register": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Specifies a summary description of the register function.",
                    "type": "string"
                },
                "address": {
                    "description": "Specifies the unique 8-bit address of the register.",
                    "type": "integer",
                    "minimum": 32,
                    "maximum": 255
                },
                "registerType": {
                    "description": "Specifies the expected use of the register.",
                    "oneOf": [
                        { "$ref": "#/definitions/registerType" },
                        {
                            "type": "array",
                            "items": { "$ref": "#/definitions/registerType" },
                            "uniqueItems": true,
                            "minItems": 1,
                            "maxItems": 2
                        }
                    ]
                },
                "payloadType": { "$ref": "#/definitions/payloadType" },
                "payloadLength": {
                    "description": "Specifies the length of the register payload.",
                    "type": "integer",
                    "minimum": 1
                },
                "payloadSpec": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#/definitions/payloadMember" }
                },
                "maskType": { "$ref": "#/definitions/maskType" },
                "converter": { "$ref": "#/definitions/converter" },
                "minValue": { "$ref": "#/definitions/minValue" },
                "maxValue": { "$ref": "#/definitions/maxValue" },
                "defaultValue": { "$ref": "#/definitions/defaultValue" },
                "visibility": {
                    "description": "Specifies whether the register function is exposed in the high-level interface.",
                    "type": "string",
                    "enum": ["public", "private"]
                },
                "group": {
                    "description": "Specifies an optional group name used to expose the register function in the high-level interface.",
                    "type": "string"
                }
            },
            "required": ["address", "registerType", "payloadType"]
        },
        "pinMapping": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Specifies a summary description of the IO function.",
                    "type": "string"
                },
                "port": {
                    "description": "Specifies the microcontroller port.",
                    "type": "string"
                },
                "pin": {
                    "description": "Specifies the unique pin number in the defined port.",
                    "type": "integer"
                },
                "direction": {
                    "description": "Specifies whether the pin will be used as input or output.",
                    "type": "string",
                    "enum": ["input", "output"]
                },
                "useInput": {
                    "description": "Specifies whether the output pin can also read its state from the input `mode`",
                    "type": "boolean"
                },
                "pull": {
                    "description": " JUST FOR INPUTS ... Specifies the state of the pin input pull, or latch, circuit.",
                    "type": "string",
                    "enum": ["up", "down", "tristate", "busholder"]
                },
                "sense":{
                    "description": "Specifies event a digital input pin is sensitive to.",
                    "type": "string",
                    "enum": ["both", "rising", "falling", "low", "none"]
                },
                "interruptPriority": {
                    "description": "Specifies the priority of the interrupt event for this pin.",
                    "type": "string",
                    "enum": ["low", "med", "high", "off"]
                },
                "interruptNumber":{
                    "description": "Specifies the interrupt number associated with the specific pin.",
                    "type": "integer",
                    "enum": [0, 1]
                },
                "out":{
                    "description": "ONLY OUTPUTS. Specifies output mode of the pin.",
                    "type": "string",
                    "enum": ["digital", "wireOr", "wireAnd", "wiredOrPull", "wiredAndPull"]
                },
                "outDefault":{
                    "description": "Specifies the initial state of the output line at boot time.",
                    "enum": [0, 1]
                },
                "outInvert":{
                    "description": "Specifies whether the output should be inverted.",
                    "type": "boolean"
                }
            },
            "required": ["port", "pin", "direction"]
        }
    }
}